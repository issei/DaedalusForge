 üéµ Finalmente chegamos √† aula 3 dessa imers√£o de agentes de ar da Alura com o Google Gemini. E como sempre, eu t√¥ aqui Fabr√≠cio Carraro com os meus queridos Carol Carneiro e Vin√≠cius Caridad, lado a lado aqui nessa aventura pra gente mergulhar nos agentes de ar. E hoje, pessoal, chegou o dia. √â isso. Finalmente vamos criar a estrutura do nosso agente, porque a gente tava criando at√© agora a l√≥gica dele, a intelig√™ncia dele, o c√©rebro do agente. E agora a gente vai criar literalmente a estrutura, os n√≥s do agente, o que conecta com o qu√™ e tudo mais. Que usando esse framework que eu diria que √© o mais usado hoje no mercado, que √© o Lang Graph. Voc√™s concordam? Super concordo, porque a gente tava acostumado com o Lang chain a criar uma sequ√™ncia de etapas. Mas agora, se a gente tiver mais sequ√™ncia, se a gente quiser ter uma l√≥gica nessa execu√ß√£o dessa gente, como que a gente faz com o Lang Graph? E normalmente problemas reais que s√£o mais complexos demandam esse tipo de abordagem. N√£o √© um caminho √∫nico, podem acontecer v√°rias coisas, ent√£o como o nome diz do Lang Graph, voc√™ cria um grafo de n√≥s e voc√™ vai navegando por esse grafo dependendo do que vai acontecer. A gente, na verdade, vai navegando e tomando decis√µes conforme as coisas v√£o acontecendo. Ent√£o isso faz todo o sentido, linka bem com os problemas que s√£o mais complexos do mundo real. E se voc√™ estiver pensando naquela d√∫vida, puta, Lang chain, por que apresentar tanta coisa assim? O Lang Graph √© da galera do Lang chain. √â exatamente da mesma galera, eles liberaram l√°. S√≥ que eles viram que, como a Carol falou, o primeiro passo do Lang chain n√£o era suficiente para a maioria dos problemas, ent√£o eles come√ßaram, e tamb√©m estava ficando muito rocambolesco, e eles falaram, vamos criar uma coisa com essa estrutura de gr√°ficos, que √© mais organizado, melhor para problemas mais complexos, e lan√ßaram o Lang Graph, que √© o que meio que o mercado come√ßou a adotar e vem utilizando. Tem outros frameworks tamb√©m que o pessoal usa, at√© alguns com menos c√≥digo. A gente pode citar a Crew AI, do Jo√£o Moura, brasileiro que criou, o Lang Flow tamb√©m, e tamb√©m de brasileiros que criaram open source, que s√£o coisas mais na pegada no-code ou low-code, mas para estruturar as que voc√™ precisa de controle total, o Lang Graph tem sido o padr√£o. Ent√£o vamos l√°, j√° que n√£o vamos ao Lang Graph, vamos come√ßar instalando ele, a primeira coisa da nossa aula. Antes eu vou criar, como sempre, aqui aula 3, obviamente, e agora a gente j√° pode come√ßar com o nosso c√≥digo para instalar, opa, aqui mais c√≥digo. Ser√° que o pessoal lembra como faz para a gente instalar? Espero que sim, n√©? Eu tamb√©m espero. A essa altura do campeonato, pip install, a√≠ o menos que para ficar quietinho, n√©? Menos menos upgrade. Menos menos upgrade. Lang Graph. Lang Graph. E √© s√≥ isso, n√©? √â s√≥ isso que a gente vai instalar na aula de hoje. Tudo o resto a gente j√° instalou nos notebooks, n√©? D√° l√° um, d√° l√° desse. Ent√£o nesse mesmo notebook, na verdade, nessa mesma sequ√™ncia. Ent√£o, se voc√™ terminou a aula de ontem e voc√™ vai come√ßar agora a aula de hoje, a gente sempre recomenda que voc√™ rode tudo, n√©? Rode o ambiente de execu√ß√£o inteiro, inclusive subindo os arquivos aqui, porque se voc√™ perdeu ali a conex√£o com o Google, isso aqui foi apagado. Ent√£o sobe de novo eles aqui do lado, ou monta no seu Google Drive, como a gente mencionou na aula de ontem tamb√©m, que vai ficar mais f√°cil para voc√™. Mas Lang Graph instalado, qual que √© o pr√≥ximo passo agora, galera? O que a gente vai fazer? Bom, uma vez que o Lang Graph est√° instalado, a primeira coisa que a gente vai fazer √© pensar, dado que √© um grafo, como que vai ser essa l√≥gica? Como que n√≥s vamos montar essa l√≥gica dos n√≥s? O que cada um vai fazer? E a√≠ n√≥s vamos usar algumas bibliotecas aqui que n√≥s j√° instalamos, vamos s√≥ importar, para definir exatamente alguns tipos de dados que um grafo tem que muitas vezes enviar para o outro. Como vai ser essa comunica√ß√£o? A gente pode fazer isso, ou a gente pode fazer um desenho do grafo s√≥ para a pessoa j√° ter na mente. Boa. O que vai acontecer? E depois eles v√£o vendo essa materializa√ß√£o no c√≥digo at√© o final. Maravilha. √ìtima, boa ideia. A gente faz esse desenho. Ent√£o vamos voltar l√° no nosso desenho da aula 1, que a l√≥gica mais ou menos √© essa daqui, s√≥ que tem mais coisas a√≠ no meio, basicamente. Eu vou fazer aqui do lado, inclusive, para a gente n√£o confundir um com o outro. Ent√£o, esses grafos, quando a gente usa o grafo, s√£o literalmente um grafo, que √© com n√≥s, e arestas e conex√µes, basicamente. Ent√£o a gente vai come√ßar aqui, o nosso agente, na verdade, vai chamar o grafo num ponto que a gente chama geralmente de in√≠cio, de come√ßo, que em ingl√™s √© o start. A gente vai ver isso inclusive no c√≥digo daqui a pouco. Ent√£o come√ßa aqui no start. O pr√≥ximo passo, a pr√≥xima elipse, como a gente tinha visto l√° no c√≥digo, vamos voltar l√°, a gente tem algumas op√ß√µes. Na aula 1, n√≥s trabalhamos bastante essa parte do, poxa, o que est√° chegando para mim? √â algo que eu consigo responder, √© algo que eu n√£o sei, √© algo que eu preciso de mais informa√ß√£o, e que a gente inclusive chamou de triagem ali, algumas vari√°veis. Ent√£o esse √© o pr√≥ximo passo. Uma vez que eu comecei o processo, a primeira coisa que eu preciso fazer √© uma triagem, para entender que tipo de entrada √© aquela que est√° chegando para mim. Essa √© a primeira interpreta√ß√£o, a triagem. Ent√£o pense que a gente √© como se chegasse um problema aqui para n√≥s tr√™s e que cada um tem uma sua fun√ß√£o. Ent√£o algu√©m recebe e vai mandar essa bola para algum lugar. Perfeitamente. Ent√£o a gente est√° aqui com o nosso n√≥ do grafo chamado triagem, aquele que vai decidir para onde vai o qu√™, que √© mais ou menos relacionado com o grafo que est√° √† esquerda aqui, ele est√° no mesmo universo aqui. Dado isso, agora a triagem, o agente vai decidir, durante essa triagem, como voc√™ falou, para onde vai. Exatamente. A gente vai pegar na informa√ß√£o interna do nosso ragzinho, que a gente chamou l√° no c√≥digo, como √© que a gente chamou? Vamos lembrar l√° no prompt, l√° em cima, auto resolver. Isso, auto resolver. Ent√£o vamos chamar aqui tamb√©m. Tudo que a gente imagina que tenha uma informa√ß√£o direto nos nossos dados, a gente est√° falando, n√£o, o agente vai auto resolver essa demanda. Ele n√£o precisa mandar para ningu√©m, n√£o precisa pedir um... abrir um ticket, nada assim. O segundo era pedir mais informa√ß√µes, se ele n√£o pegou ali a hist√≥ria mais ou menos, que √© quem a gente chamou de pedir info, vou at√© copiar para ficar coerente aqui, ficar igualzinho. E o terceiro √© o de abrir um ticket, se for algum caso, por exemplo, que solicito cinco dias a mais de trabalho remoto, e por exemplo, vou pegar abrir chamada, abrir ticket, como voc√™ chamou a√≠ na sua casa. Beleza, a gente tem essas tr√™s op√ß√µes aqui. E a√≠ o grafo vai fazer o isso. Eu vou fazer aqui na mesma ordem do nosso grafo da esquerda para ficar... Sen√£o o pessoal de casa vai me matar. O pessoal que tem o toque vai me matar, eu j√° sei como funciona, pessoal. Ent√£o, √≥, o abrir chamado √© o abrir ticket e pedir mais informa√ß√µes √© o pedir info. A√≠ aqui a setinha e aqui a setinha, maravilha. Esse √© o primeiro passo, n√©? Mas quando o cara, n√©, quando o... Pode acontecer do agente tentar resolver e a√≠ ele vai l√° no Rague, n√©, que o tentar, o auto resolver √© responder ao Zeno Rague, basicamente, e ele vai buscar l√° no Rague e ele v√™, puts, eu acho que n√£o √© o suficiente, n√©? Pode acontecer, a gente pode ter que pensar em todos os casos, os casos felizes, mas os casos n√£o t√£o felizes assim. E ele pode voltar e pedir mais informa√ß√£o. Pode, pode exatamente. Ent√£o a gente vai ter... A gente poderia talvez ligar o auto resolver ao pedirin, ou... √â, na verdade isso est√° muito ligado a problemas do cotidiano, independente da ind√∫stria, da empresa que voc√™ est√° criando. Normalmente acontece isso, n√©? Voc√™ precisa de um atendimento. Voc√™ liga ou entra num chat para conversar. Normalmente √© feito uma triagem, tem triagens menos avan√ßadas, do tipo, digite um para isso, dois para aquilo, tr√™s para aquilo. √â uma forma de triagem, √© uma triagem mais inteligente. E uma vez que voc√™ definiu a triagem, sempre tem, poxa, d√° para ser resolvido de forma autom√°tica, e muitas vezes voc√™ tenta de forma autom√°tica, mas n√£o consegue, a√≠ tem que esperar um monte, tem que falar com um atendente. Ent√£o eu acho que isso traduz bem um problema do mundo real, que n√≥s estamos criando, n√©? Ent√£o eu vou tentar autorresolver, mas a informa√ß√£o pode ser insuficiente. A√≠ vou, aqui √≥, vai pedir mais informa√ß√µes. At√© mesmo o Arilin pode compreender com a informa√ß√£o que ele buscou, que ele precisa abrir uma chamada. Exato, ent√£o, pode parecer meio confusa essas conex√µes, mas como a gente falou, a triagem pode j√° ir direto, porque ela j√° sabe que tem que pedir mais informa√ß√µes, porque perguntou quantas capiv√°rias tem no empremeros, precisa de mais informa√ß√µes, ou ela j√° sabe automaticamente que tem que abrir um chamado, ent√£o ela vai triagem direto para abrir chamado, que √© o caso do trabalho remoto, ou alguma outra coisa nesse sentido, ou ele acha, eu acho que isso aqui eu consigo resolver, e a√≠ ele busca l√° nos PDFs que a gente viu e ele fala. Quando for para pedir trabalho remoto, n√£o adianta, o procedimento n√£o √© s√≥ pedir, n√£o √© s√≥ fazer, voc√™ tem que pedir autoriza√ß√£o, tem que abrir um ticket, abrir n√£o sei o qu√™, ent√£o o que ele vai fazer √© exatamente isso, eu tentei autorresolver, busquei no Rague, o Rague falou, vai l√° e abre um ticket. Exatamente, e tem o cen√°rio tamb√©m que se ele conseguiu resolver o problema que chegou na triagem s√≥ com Rague, o que acontece? A gente pode chegar no final da execu√ß√£o desse grau. Perfeito, e a√≠ como o come√ßo foi o start, o come√ßo agora vai ser o final, o end, que tamb√©m √© um termo que a gente vai usar na programa√ß√£o desse agente, ent√£o temos aqui, ele autorresolveu e deu certo direto, ou ele autorresolveu, foi para pedir info e foi para o final direto, triagem pedir info final direto, triagem autorresolver, abrir chamado e final, triagem abrir chamado final direto. Ent√£o pode parecer um pouquinho confuso, mas a gente j√° explicou que √© menos confuso que parece no final das contas. E por isso a necessidade de um grafo, como que eu representaria isso s√≥ em uma chain, por exemplo, n√£o seria poss√≠vel, e aqui eu consigo ter uma representa√ß√£o bem completa. Porque imagina fazer isolado cada uma dessas possibilidades, facilita muito mais a gente fazer. D√° para fazer. D√° para fazer. N√£o recomendo. Ent√£o vamos voltar agora l√° para o c√≥digo para tentar colocar isso na pr√°tica, Ent√£o primeiramente, a gente vai come√ßar a criar quem √© esse agente, basicamente, que tipo de coisa ele vai receber, que ele vai criar tamb√©m, que resposta ele vai dar para a gente. Perfeito. E usando a mesma l√≥gica das aulas anteriores, primeiro a gente meio que cria os componentes e depois conecta tudo no final. Ent√£o a primeira coisa √© falar o que a gente tem dentro do agente de dados, informa√ß√µes, e a√≠ vamos setar algumas bibliotecas aqui que v√£o ajudar a gente a fazer esses dicion√°rios de dados que n√≥s vamos usar. Ent√£o vamos l√°, from typing, Digitando. Digitando, tamb√©m usamos isso j√° na primeira aula, Import, type, ticket e opcional aqui em ingl√™s, optional. Ent√£o √© um dicion√°rio desse tipo typed e opcional que pode n√£o existir l√° dentro. E agora a gente pode fazer defini√ß√£o de classe do agent state. De quem vai ser esse agente. Ent√£o, class, agent state, o estado, as coisas que ele vai ter, que ele vai responder para a gente, e tudo mais. Que vai ter dentro desse estado do agente vai ter o type dict, que vai ser... Aqui dentro dos par√¢metros. Isso, dos par√¢metros da classe, isso. E a√≠ tamb√©m a gente p√µe um total igual a false para indicar que nem todas as chaves precisam estar presentes. Ent√£o vou ter v√°rias chaves, pode ser que uma ou outra eu n√£o tenha, mas eu posso seguir dessa maneira. Perfeito. Isso √© um dos modos de fazer. Para a gente estar fazendo desse modo, voc√™ poderia fazer usando o outro, usando para ident, inclusive, que a gente usou l√° na aula 1, mas vamos continuar desse jeito que √© mais simples. E baseado na nossa aula passada, o que n√≥s t√≠nhamos ali dentro do agente? A gente tinha mensagem que ele trafega, a mensagem que a gente... √â preciso de aspas ou n√£o? N√£o, mensagem, dois pontos, e o tipo, que a gente est√° definindo os tipos. Ent√£o a mensagem string, legal. A triagem, que vai definir para onde vai. Dict, que √© um dicion√°rio, que s√£o as tr√™s tipos de triagem que n√≥s criamos na aula passada. Voltamos l√°, aqui a nossa triagem, onde ele estava. Estava l√° na aula 1. A aula 1, isso. Esse aqui √© um dicion√°rio. Aqui, a triagem. Ele retorna aquela sa√≠da, ponto model, dump, esse dicion√°rio aqui. Um decis√£o, urg√™ncia e campos soltantes. Perfeito. Esse √© o nosso dicion√°rio, por isso agora aqui ele √© um dict. Agora a gente pode colocar resposta, resposta que pode ser opcional, porque √†s vezes o modelo n√£o vai trazer, a gente n√£o vai trazer a resposta agora. Ent√£o colocar um optional e string. Optional string, tudo junto assim? Isso, dentro de colchetes. De colchetes, t√°. Cita√ß√µes que a gente tem das fontes, que √© uma lista de dicion√°rios. Uma lista de dicion√°rios. List? Sim, list-dict. Ou √© um liste, escrito list, n√©? A gente tem uma pergunta interessante, √© por que a resposta √© opcional e as cita√ß√µes n√£o √©? Porque se eu n√£o tenho resposta, eu n√£o tenho cita√ß√£o. Porque eu cito um chunk para a resposta. E a√≠, se voc√™s lembrarem, na aula passada a gente podia ter uma lista vazia de cita√ß√µes. Ent√£o, ela sempre vai ter a lista. A lista pode ter ou n√£o elementos, mas por isso que ela n√£o est√° aqui como opcional, porque a lista sempre vai existir. Perfeito. E s√≥ para confirmar, o dict aqui do triagem e das cita√ß√µes √© o dict esse mai√∫sculo do typing ou √© o dict min√∫sculo? √â o dict min√∫sculo. Ah, √© o dict min√∫sculo do python. Isso. T√° bom. Perfeito. Perfeito. A√≠, a pr√≥xima √© Cil, rag, teve sucesso ou n√£o? Foi true ou false? Ent√£o... Um boleano, rag, pode ser rag, sucesso. A√≠ √© um bull. E a√ß√£o final do nosso agente que vai ser o string. Uhum. E a√≠ vai poder ser uma daquelas tr√™s que a gente viu. Exatamente. Abre o ticket, ok, basicamente, ou pregui√ßom, ou pedir info. Perfeito. S√≥ isso? S√≥ isso. Ent√£o, a estrutura dos estados aqui est√£o bem definidas. Agora, a gente tem que, de fato, criar as fun√ß√µes de cada n√≥. Cada um desses n√≥s aqui que a gente cuida. N√≥ faz, o que ele recebe, o que ele envia. Acho que agora √© onde a gente vai criar essas fun√ß√µes que definem mesmo a fun√ß√£o do estado atual ali do agente. Do agente state que a gente vai criar. E o bom de ter o desenho √© porque isso vai guiar a gente. Ent√£o, a gente vai come√ßar pelo n√≥ de triagem. Ent√£o, vamos definir triagem. Depois, tem o n√≥ de auto resolver. Vamos criar essa defini√ß√£o desse n√≥. Ent√£o, a gente vai se guiando muito pela imagem que a gente desenhou. Ent√£o, j√° facilitamos a vida de voc√™s. Exato. Vamos l√°, ent√£o. O primeiro n√≥ vai ser esse mesmo? Vai ser o de triagem? Isso. Beleza. Ent√£o, vou chamar em ingl√™s? √â node underline. Vai ser uma fun√ß√£o? √â uma fun√ß√£o. Vamos definir ela. Node de triagem. E a√≠, o estado dele √© um agent state. Ent√£o, dentro disso. Agent state que a gente acabou de criar aqui, essa classezinha. Coloca s√≥, Fabr√≠cio, state dentro. Dois pontos, agent state. Ah, t√°. Ele vai receber um state desse tipo. Desse tipo, perfeito. Dessa classe que n√≥s criamos. E a√≠, a gente s√≥ direciona, faz a setinha para frente, de vez de dois pontos. Que √© um agent state. Vai retornar um agent state tamb√©m. Perfeito. √â, basicamente o que a gente vai fazer. Ele vai subir ali esse agent state. Esse chamado state, podia chamar a gente ou qualquer coisa assim. E a√≠, ele vai popular isso de alguma forma e retornar ele popular. E o pr√≥ximo n√≥ tamb√©m. Ent√£o, √© incremental. Exato. Perfeito. Ent√£o, o que o n√≥ triagem faz? Ele decide para onde vai. Ele decide e fala. Para onde que n√£o estamos. Ent√£o, vamos dar um print. Para falar, entrou nesse n√≥? Entrou. Ent√£o, o primeiro print √© executando o n√≥ triagem. Para a gente saber que entrou e est√° ali fazendo o processo de decis√£o. Ent√£o, vamos dar uma mensagem executando o n√≥ triagem. No n√≥ triagem, ele deu uma visualiza√ß√£o mesmo. Sim. E depois a gente vai, de fato, dar o retorno desse estado. O retorno desse estado √© o triagem. Ele est√° bem esperto. Esse carinha a√≠ mesmo. Exatamente. √â um dicion√°rio no caso. Isso. Que vai ter a mensagem. Porque o n√≥ de triagem, ele fala exatamente isso. Qual foi a decis√£o baseada naquela triagem dentro daquele dicion√°rio que eu tenho as tr√™s op√ß√µes? Ent√£o, √© isso que ele est√° gerando. Est√° retornando. Esse state aqui, lembrando, ele √© um cara desse tipo aqui. Que tem mensagem, que tem triagem, que tem respostas, cita√ß√µes e tudo mais. Ele cont√©m todas essas atributos aqui dentro dele. E aqui a gente est√° passando. A variable state, a mensagem, apenas a mensagem, para rodar a fun√ß√£o triagem, que √© aquela l√° da aula 1. Da aula 1, perfeito. E a√≠ ele vai rodar a fun√ß√£o triagem aqui da aula 1, essa fun√ß√£o aqui, que vai retornar algo nesse sentido aqui. Isso aqui vai ser o retorno da triagem. Ent√£o, o que a gente fez aqui? Pega a resposta dessa fun√ß√£o, que √© esse dicto ali de decis√£o, urg√™ncia e dados, contudo faltante, e popula esse atributo de triagem, nessa vari√°vel triagem que est√° dentro do nosso agent state. Essa palavra state pode confundir, talvez, novamente, podia chamar de Jos√©, pode chamar de do que voc√™ quiser, √© s√≥ uma vari√°vel. A gente chamou ela de state porque ela √© alter√°vel, o estado vai mudando, e √© um padr√£ozinho utilizado, mas poderia chamar do que voc√™ quisesse. Beleza, ent√£o, triagem √© o primeiro n√≥. Agora a gente tem que fazer a mesma coisa para todos os outros n√≥s. Posso fazer separado, fazendo um bloco de baixo? Pode ser. A gente pode, para o n√≥, resolver. Exatamente. O n√≥ tem resolver aqui. Ent√£o, vai chamar de node, underline auto, underline resolver. Que vai receber o estado, o instante. Tamb√©m, mesma coisa aqui. A defini√ß√£o √© igualzinha. Lembrando o que eu falei, eles recebem, todos v√£o receber esse cara e ir populando ele, basicamente, s√≥ vai populando. S√≥ que esse n√≥, desculpa, Carol, mas se voc√™ voltar l√° no desenho, Fabr√≠cio, a gente v√™ que o triagem recebe alguma coisa, ent√£o, adicione, o resolver tem bastante conex√µes, e ele faz o rag e tudo isso, ent√£o, a inicializa√ß√£o dele √© igual, mas ele vai ter algumas coisinhas a mais ali no meio dele. Sim, perfeito. E eu gostei do print que a gente fez. Sim, eu gostei tamb√©m. Vamos botar aqui o print, executando o n√≥ de auto resolver. Isso. Vou botar um underline aqui para ficar mais bonitinho, beleza. E a√≠, o que ele vai ter? A primeira coisa, a gente vai criar, ele vai gerar uma resposta de rag, ent√£o, vamos l√°, que foi um pouco do que n√≥s criamos na aula passada. Vamos l√°, usar a resposta rag, resposta underline rag, √© igual, perguntar underline pol√≠tica, j√° deu para a gente que j√° tinha feito. A gente j√° fez essa fun√ß√£o. Essa fun√ß√£ozinha que a gente rodou aqui, perguntar pol√≠tica rag, passando essas mensagens de teste. √â exatamente essa mesma linha que n√≥s estamos colocando l√° embaixo, a resposta rag, beleza. A mensagem que est√° no state. Sim, √© a mesma coisa que a gente fez aqui, s√≥ que agora a triagem j√° decidiu, o rag consegue resolver essa mensagem, essa pergunta. A gente pode at√©, eu acho, que trocar de mensagem para pergunta aqui, talvez, se for ficar mais claro. Pode ser. Ent√£o, trocamos aqui na classe, trocamos no n√≥ de triagem e trocamos aqui tamb√©m no n√≥ de auto resolver. Mas n√£o √© s√≥ isso, n√©? N√£o √© s√≥ isso, n√£o. Porque aqui a gente pegou a resposta, mandou a pergunta e passou pelo processo do rag que n√≥s j√° fizemos. E ficou nessa vari√°vel resposta rag, resposta. Perfeito. S√≥ que lembra que √© um grafo. Ent√£o, ele j√° passou pelo triagem, pela nossa l√≥gica, e depois ele pode passar ou n√£o pelo auto resolver que faz o rag. Se ele passar, a gente tem que dar um update com a gente. Ent√£o, atualizar as informa√ß√µes que est√£o l√°. Ent√£o, √© isso que n√≥s vamos fazer agora. S√≥ lembrando antes, Vinny, aqui, o retorno dessa fun√ß√£o, a pergunta pol√≠tica rag, tamb√©m √© um dict, que tem o answer, a resposta, as cita√ß√µes e se encontrou com o texto ou n√£o. Perfeito. Ent√£o, vamos l√°, voltando aqui, n√©? E √© isso que est√° dentro desse resposta rag, esse dicion√°riozinho a√≠. E agora ent√£o n√≥s vamos fazer um update, ent√£o √© um update mesmo, dois pontos. O que n√≥s vamos atualizar? O estado do agente que passou. Agente state. Sim, esse nosso carinha aqui, nossa classe. Agente state, perfeito. Igual... Abre chaves. Ele est√° muito esperto. √â que ela vai pegando todo o contexto do que a gente criou, e agora a gente vai usar bastante isso, n√©? Ent√£o, o que ele vai trazer? O que o rag traz pra gente? J√° veio a autom√°tica, a resposta, a cita√ß√£o, o chunk que foi usado, e se teve sucesso ou n√£o na... E olha que legal, ele... Essas tr√™s chaves aqui do dicion√°rio s√£o essas chaves aqui, √≥, resposta, cita√ß√µes e rag sucesso. Perfeito. O contexto encontrado n√£o √© a mesma coisa, tipo, √© a mesma coisa, mas n√£o √© a mesma coisa. √â, exato. Mas ele... Putz, eu acho que √© isso da√≠. Eu acho que a √∫nica coisa que talvez o modelo que errou na hora de falar pra voc√™ √© nas cita√ß√µes, porque cita√ß√µes √© uma lista, n√©? √â, √© uma lista, n√©? √â, √© uma lista, n√©? Ent√£o, a √∫nica coisa que ele vai trazer √© nas cita√ß√µes, porque cita√ß√µes √© uma lista. √â uma lista, √© verdade. Ent√£o, √© cita√ß√µes, a√≠ depois de cita√ß√µes ali entre aspas, p√µe v√≠rgula e abre e fecha a par... Cochetes. Cochetes, √©. Ou seja, pega l√° das cita√ß√µes e guarda numa lista vazia, praticamente. Do resto, t√°, √© isso. E a√≠ tem a √∫ltima parte, que √© um if pra gente ver, sim, o contexto, n√©? Encontrado, lembra que ele pode ir pro... pra a√ß√£o final, ou ele pode direcionar pra alguma outra coisa. Ah, sim, ele pode ir pro end aqui, n√©? Ou falar, putz, n√£o foi o suficiente. O rag retornou, bacana, mas eu ainda preciso abrir o chamado, ainda preciso pedir mais in. Perfeito. Bele. Ent√£o, isso que n√≥s vamos fazer, vamos criar um if, onde a resposta rag, ent√£o, se a resposta do rag, que a gente j√° validou, a√≠ voc√™ abre e fecha cochetes, por favor, entre aspas dupla, contexto encontrado, ent√£o, contexto encontrado, lembra que √© do rag sucesso, n√©? Ent√£o, esse que me determina se o rag tem sucesso ou n√£o. Dois pontos, update, √≥, ele t√°... T√° espertando. T√° tentando. Entre cochetes, n√£o, update entre cochetes e aspas dupla, a√ß√£o underline final, que √© a nossa cara, a√ß√£o final aqui, n√©? Isso. Dessa classe. Ent√£o, entre aspas dupla, estudo mai√∫sculo, auto resolver. Que √©... Tipo, a a√ß√£o... √ì, eu entrei aqui no n√≥ de auto resolver. Se o meu rag teve sucesso, ele termina nele mesmo, ele termina em auto resolver. N√£o precisa chamar mais nada, ent√£o, eu s√≥ t√¥ definindo. Tipo, a a√ß√£o inicial foi auto resolver, a a√ß√£o final tamb√©m vai ser porque ele j√° terminou. E a gente s√≥ d√° um final, um return, depois do if, return, update. Dentro do if ou fora do if? Fora. Return e update. Perfeito. E agora que a gente j√° definiu o n√≥ de auto resolver, a gente pode ir pro pr√≥ximo n√≥, que √© o de pedir informa√ß√£o. Perfeito. Ent√£o, vamos l√°, def, node, pedir... As duas primeiras linhas voc√™ pode at√© copiar, que vai ser bem parecido. Que √© at√© o print ali, n√©? Sim, copiar o agent state igual, recebe, executando o n√≥ de pedir info. E a√≠ o n√≥ de pedir info, o que ele vai fazer? Ele n√£o faz muita coisa, n√©? √â, ent√£o, ele vai... O que a gente vai ter que fazer? A gente pode dar uma resposta j√° pedindo alguma outra informa√ß√£o. Queria saber mais, ou... Me fale um pouco mais do que voc√™ precisa. Ent√£o, a gente cria uma mensagem aqui que a gente pode chamar de fault. Fault, √© isso embaixo do print, Fault, F-A-L-T, Faltando, n√©? Faltantes, vamos chamar aqui. Faltantes √© igual. State, que √© o estado que n√≥s estamos trabalhando. Triagem, porque ele veio, sempre se ele chegou nesse n√≥, ele veio, por exemplo, do triagem.get. E a√≠ o que n√≥s vamos pegar? Os campos faltantes. Ent√£o, suponho campos faltantes, entre aspas, dupla. Que o campos faltantes, ele √© uma coisa l√° da aula 1 tamb√©m. L√° da aula 1. Que n√≥s criamos na... Uma listinha, exato. Aqui, √≥, campos faltantes. Definimos aqui nesse triagem alt, que tamb√©m ele t√° aqui na resposta do triagem. Do triagem, exato. Exatamente, aqui, √≥, campos faltantes √© uma listinha vazia ou n√£o, dependendo do caso, n√©? A gente coloca, tem que colocar ali a lista no final. V√≠rgula, coxente. Campos faltantes, abro e fecha... N√£o, dentro do par√™nteses. Ah, sim. Que √© uma listinha, verdade. Ent√£o aqui a gente vai obter campos faltantes como default pra essa lista vazia, se for o caso, n√©? E a√≠ o que a gente pode fazer na sequ√™ncia, na pr√≥xima linha, √© tentar buscar algum tema espec√≠fico, algum contexto espec√≠fico, faltante. Ent√£o a gente pode p√¥r detalhe, igual, abre e fecha aspas dupla, com uma v√≠rgula dentro, a√≠ fora, ponto join, abre e fecha aparente, fault, de faltantes, n√©? Faltantes, na verdade. If, fault, faltantes, desculpa, else, entre aspas dupla, tema e contexto espec√≠fico. Beleza. Ent√£o esse join, pra quem n√£o sabe dessa... Essa aqui √© uma estrutura que voc√™ faz em uma linha s√≥ um if else, basicamente, n√©? Do Python. Voc√™ pode fazer isso aberto tamb√©m, se voc√™ quiser. A gente fez aqui, √≥, mas se existem dados faltantes, se tem alguma coisa nessa vari√°vel que a gente pegou l√° do triagem, get, o que a gente vai fazer? Pega todos eles e separa por v√≠rgula. Ent√£o cria um texto, uma sting que vai pegar todos eles, cada um dessa listinha aqui que voc√™ recebeu do faltantes, e junta todos eles separados por uma v√≠rgula. Sen√£o, voc√™ s√≥ retorna nessa vari√°vel detalhe e fica com isso daqui. Isso, essa √© a mensagem, isso aqui √© a mensagem que a gente vai passar por usu√°rio. Isso. E a√≠ mais legal √© que a gente pode fazer um retorno dessa def... dessa fun√ß√£o e criar uma resposta, ent√£o a gente pode colocar return, abre e fecha chaves, a gente pode colocar resposta entre aspas, dois pontos, ent√£o a gente pode at√© colocar assim F, uma stringzinha, pra avan√ßar, preciso que detalhe, o qu√™? Os detalhes que a gente acabou de arrumar. Ent√£o, entre chaves de novo, detalhe √© a vari√°vel, √© que a vari√°vel √© detalhe. Exatamente. Novamente, se voc√™ ficou confuso com isso daqui, √© a mesma coisa que fazer, √≥, if... ops... if faltantes, dois pontos, p√° p√° p√°, join por v√≠rgula os faltantes. Elsi, ali√°s, aqui faltou detalhes, n√©? A vari√°vel detalhes detalhe recebe isso daqui. Do contr√°rio, a vari√°vel detalhe vai receber tema e contexto espec√≠fico, n√©? Poderia ser nenhum dado faltante, poderia ser qualquer mensagem que voc√™ quiser. Eu acho que assim fica pra quem n√£o √© fluente em Python, √© uma estrutura mais cl√°ssica, n√©? Que a gente encontra. Perfeito. Ent√£o, eu vou deixar uma estrutura mais cl√°ssica ali, e s√≥ isso? N√£o, calma. Falta mais informa√ß√£o. Falta mais esse return a√≠, n√©? Ent√£o, a gente tem aqui, no return, a gente j√° tem aqui a mensagem, que a gente vai passar a resposta, com o detalhe que a gente acabou de separar no if, em duas etapas, depois as cita√ß√µes, ent√£o, cita√ß√µes. Passa aqui na linha de baixo pra ficar mais claro, n√©? E a√≠, cita√ß√µes, dois pontos. Vai abrir faixa colchet porque √© uma listinha, v√≠rgula, e o principal que √© a√ß√£o final. Ent√£o, qual foi a√ß√£o final desse n√≥, que √© pedido de informa√ß√£o? A√ß√£o final. √â claro, porque uma cita√ß√£o, um pedido de informa√ß√£o n√£o tem cita√ß√µes. Exatamente, est√° vazia. Ent√£o, ele manda uma lista vazia, basicamente, n√©? E aqui a nossa a√ß√£o final, qual que vai, a√ß√£o final vai ser pedido de informa√ß√£o. Exato. Ent√£o, aqui, fechamos. E agora temos mais um n√≥ pra gente definir, que √© o de abrir chamado. Perfeito, ent√£o, voltando l√°, j√° resolvemos o n√≥ triagem, o n√≥ de auto resolver, o n√≥ de pedido de informa√ß√£o, s√≥ falta o de abrir chamado, abrir ticket, seja l√° como se chamou, ent√£o, def, no de abrir chamado, abrir ticket, seja l√° que for, tamb√©m vai copiar, n√©? A gente pode copiar isso, as duas primeiras linhas s√£o id√™nticas, tudo isso, s√≥ aqui que √© n√≥ de abrir chamado, beleza, e a√≠, pra baixo, o n√≥ de abrir chamado, ele vai meio que abrir o chamado. √â, tem, tem, √© importante aqui, n√©, colocar o o n√≥ anterior, que √© o de triagem, ent√£o, a gente pode colocar de triagem, igual a state, igual a state, e entre isso. De triagem, n√©, pega a triagem, bota numa vari√°vel local aqui. Perfeito. E a√≠, a gente vai criar como que vai ser essa abertura do chamado, que √© a fun√ß√£ozinha final ali de return, ent√£o, pode p√¥r um return. J√° vai retornar, que no seu caso, aqui a gente j√° vai dar um return direto, n√©, tipo, de uma mensagem de vamos abrir, simulando, abrir um chamado. No seu caso, voc√™ poderia inclusive conectar com um email, uma tool, abrir chamado no gira da empresa, seja l√° o que for, seria um pr√≥ximo passo. Ent√£o, o Jimny est√° muito inteligente. Eu estou vendo o c√≥digo que ele est√°, que √©, de fato, vou ter uma resposta, n√©, que, olha l√°, j√° colocou o f string aqui, n√©, o f string chamado aberto com urg√™ncia. E a√≠ ele pega l√° da triagem, n√©, qual que √© a urg√™ncia, se √© uma urg√™ncia baixa, m√©dio, alto, n√©, que a gente tinha definido l√° na aula 1. A √∫nica coisa que faltou foi a descri√ß√£o dele nessa, ent√£o at√© aqui, p√¥, qual que √© a urg√™ncia, legal. S√≥ que depois da urg√™ncia legal, a gente colocar uma descri√ß√£o do que que √© esse chamado, n√©. Ent√£o, logo na sequ√™ncia, ele depois da, no lugar da v√≠rgula, √© triagem, abriu... Est√° vindo o chamado com urg√™ncia, urg√™ncia m√©dia, baixou a alta, para... Fechou... Seria isso? N√£o, √©, deixa s√≥, fechou as chaves, ent√£o √© no lugar dessa v√≠rgula, a gente coloca um ponto final. Depois, aqui antes da v√≠rgula, n√©, antes de fechar as aspas. Isso, √© perfeito. E agora a gente pode p√¥r uma descri√ß√£o, que a gente quer uma descri√ß√£o do que que √© esse chamado, e a√≠ colocamos um, abre descri√ß√£o, dois pontos, abre chaves, state, abre parens, parens, n√£o, desculpa, cochetes, mensagem. Porque a mensagem agora a gente transformou aqui em pergunta, n√©, √©, transformou em pergunta, ent√£o aqui agora, tipo a descri√ß√£o desse chamado √© a pergunta do usu√°rio. Exato, perfeito. √â o que ele pediu, e a√≠ a gente coloca, a gente pode colocar tamb√©m uma quantidade m√°xima de caracteres, porque agora, pra passar pra quem vai ler o chamado, alguma coisa assim. Ent√£o √© s√≥ colocar, abrir e fechar cochetes tamb√©m, do lado de pergunta, e a√≠ voc√™ coloca dois pontos, 240 caracteres, √© um bom, √© mais do que um tweet, mais do que um tweet, 140, 140, pode ser, resuma em um tweet, ele t√° dando um errinho aqui que eu t√¥ achando estranho, √≥, que ser√° que esse eu, ah, eu n√£o fechei alguma coisa em algum lugar, o pessoal acha que pode ser aspas duplas, porque a gente usou uns aspas simples, que voc√™s acham, pode ser, que ele confundiu a abertura l√° do come√ßo com perfeito, e aqui a gente usou aspas simples, √© verdade, acho que a gente tava fechando. Maravilha, ent√£o, a resposta vai ser isso, n√©, abrir o chamado com urg√™ncia, descri√ß√£o tal, que a gente falou, poderia ser voc√™ conectando com algum e-mail, algum seletor, alguma tool de de gir, alguma coisa assim. O abrir o chamado n√£o tem cita√ß√£o, porque ele n√£o √© raio, n√©? E a a√ß√£o final √© abrir o chamado. S√≥ isso? Fechadinhos, vai l√°, maravilha. Qual que √© o pr√≥ximo passo, n√©, t√¥ voltando l√° pro nosso desenho do agente? √â o final, n√©, basicamente, chegamos no final do fluxo, mas tem mais coisa pra fazer a√≠ no meio-termo, n√©, no meio-termo. √â, agora a gente definiu cada estado, t√° bem definido o que cada um faz, agora a gente vai meio que pra fun√ß√£o principal, que √© a main, que vai meio que conectar tudo agora. √â onde a gente vai conseguir conectar e depois criar os workflow mesmo de funcionamento. Que √© tipo as decis√µes e tudo mais, antes ainda de desenhar o nosso gr√°fico. Isso, antes de desenhar. Quando estiver tudo conectado, a gente pode pedir pro Python aqui criar o desenho com base no c√≥digo e ver como similar ficou com o que n√≥s criamos no desenho. Entendi. Ent√£o, o que a gente criou aqui, foram quatro nossos. Nota e age, nota resolver, pedir info e n√£o abrir o chamado. Aqui, 1, 2, 3, 4. O que a gente vai criar agora s√£o as arestas. Exatamente. Quem conecta onde? Exato. Perfeito. Ent√£o, o primeiro defini√ß√£o que n√≥s vamos fazer √© como que eu decido o n√≥ principal. Como que eu fa√ßo essa decis√£o, que √© a primeira aresta. Ent√£o, vamos l√°. Def. Antes de a gente fazer essa defini√ß√£o da primeira aresta, que tal a gente ter mais uma camada de seguran√ßa e criar palavras-chaves pra a gente auxiliar na tomada de decis√£o? Pode ser, eu acho que faz sentido. Porque a gente pode, a partir dessa lista de palavras, elas serem o nosso gatilho pra ir pra um lugar ou pro outro. Ent√£o, podemos fazer isso. Exatamente. Ent√£o, por exemplo, quais seriam palavras-chaves que um usu√°rio falaria pra direcionar pra uma abertura de ticket? Ent√£o, vou chamar de keywords, abrir ticket, ou algo assim, chamado, como voc√™ quiser chamar. E voc√™ pode abrir colchetes. Isso √© uma lista de palavras. E a gente tinha falado l√° em cima, n√©? A gente tinha come√ßado a mencionar no prompt inicial, √≥, pedidos de exce√ß√£o, libera√ß√£o, aprova√ß√£o, acesso especial, quando ele pede precisamente pra abrir chamados, basicamente, n√©? Ent√£o, aqui a gente vai fazer basicamente isso, n√©? Vamos colocar algumas coisas. Ent√£o, exce√ß√£o, aprova√ß√£o, libera√ß√£o, acesso especial, abrir ticket, abrir chamado, acesso especial, enfim, d√° pra voc√™ popular isso aqui mais, at√© se voc√™ quiser, n√©? E d√° pra usar ali no momento de criar as decis√µes. Mas beleza, com isso criado a gente pode j√° partir direto pra cria√ß√£o das arestas, n√©? Exatamente. O que √© interessante, eu acho que vale tamb√©m refor√ßar, po gente, voc√™s est√£o falando de LLM, embedding, e agora t√° criando palavra-chaves, n√©? Faz sentido. Mas √© importante, quando voc√™ tem uma palavra que meio que voc√™ tem certeza que pode acontecer dentro daquele fluxo, isso que a gente chama um pouco de fallback, que pode ajudar ali na pr√≥pria decis√£o. Ent√£o, n√£o √© porque a gente t√° usando a LLM que a gente n√£o pode dar essas ajudas ali do dia a dia, ent√£o faz super sentido. Perfeito. Ent√£o, o que eu fa√ßo agora? A gente vai ter que criar uma fun√ß√£o, n√©? Ent√£o, vai ser um defzinho. Que vai ser a... a fun√ß√£o meio que principal que a gente vai trabalhar. Ent√£o, a gente pode p√¥r o nome decidir, principal ou principal, ou... √â como se fosse um gerente, n√©? Que a gente comenta nas aulas passadas, √© o gerente aqui que vai escolher pra onde que vai direcionar. Perfeito. Ent√£o, essa fun√ß√£o ela tem um estado parecido com o que a gente tava criando anteriormente. Ent√£o, state agent, gozinho. Vai criar uma copa. Ele retorna um edit state tamb√©m? N√£o, ele retorna um string. Um string, beleza. Legal. Perfeito. As fun√ß√µes que n√≥s vamos criar v√£o seguir esse padr√£o, n√©? Bom, feito isso, a gente pode dar um print, seguir o mesmo padr√£o pra falar, √≥, t√¥ decidindo ap√≥s a triagem. E a√≠ a gente vai criar esse log de... meio que obter os status ali pra ir seguindo. Ent√£o, quando eu chego no... na triagem, eu chego na triagem e tenho que tomar uma decis√£o. Ent√£o, a gente pode dar um nome aqui, um nome que a gente quiser, porque a gente pode chamar de decis√£o, ou de decis√£o, ou alguma coisa assim. Essa decis√£o, ela vai partir de um estado, um state, e... Em algum lugar, n√©? Ele vai pegar o resultado ali da triagem, basicamente. A triagem e a decis√£o. Ah, boa. Lembrando, n√©? Vamos... Cad√™ esse edit state aqui? Ele pega aqui, √≥, uma triagem, que a triagem √© um dict. E indo l√° em cima, voltando, esse dict, o que que ele tem? Decis√£o, que √© auto resolver, abrir o chamado, ou pedir info, urg√™ncia, e temos soltante. Ent√£o, ele entrou primeiro na triagem e depois nessa decis√£o, que vai ter um desses tr√™s textos l√°, idealmente, n√©? Perfeito. E a gente chamou isso, botou isso nessa vari√°vel decis√£o. Ent√£o, como voc√™ acabou de falar, ela, essa vari√°vel decis√£o, ela tem as tr√™s possibilidades que voc√™ acabou de mostrar. Ent√£o, √© isso que a gente vai ver. Uma vez que ele recuperou esse estado, a gente tem que tomar uma decis√£o pra cada um. Ent√£o, vamos l√°. Se, n√©, o if, a decis√£o foi igual a auto resolver, que √© uma das decis√µes, a gente vai fazer alguma coisa. Um, dois pontos, a√≠ coloca dois pontos, pode colocar na mesma linha que ela √© curtinha, ent√£o return. Quando for auto resolver, o que que eu vou chamar? Auto resolver. Eu vou chamar Vague, n√©, no caso. Ent√£o, a gente pode colocar o return aqui na mesma linha, ent√£o, o que ele vai retornar? Ele vai retornar o auto resolver mesmo. Alguma coisa ele tem que retornar pra conectar l√°, n√©? Perfeito. Ent√£o, se a decis√£o foi auto resolver, a gente pode p√¥r auto resolver ou p√¥r auto s√≥ pra ficar mais f√°cil, beleza? Ele t√° sugerindo aqui o Gemini, na Intelig√™ncia artificial, ele sugeriu, se for auto resolver, retorna auto resolver. Se for pedirinfo, retorna pedirinfo. Se for auto resolver, retorna auto resolver. Me parece ok pra voc√™s? T√° perfeito. A gente poderia colocar at√© um... De vez de ter o terceiro if deixar como um else ali, mas... S√≥ um return mesmo. D√° a mesma coisa, s√≥ um return, porque se n√£o entrar em nenhum dos dois, ele seria o default, mas assim tamb√©m vai funcionar. Aqui poderia ser um elif tamb√©m, n√©, j√° que √© um else, enfim, tem um milh√£o de op√ß√µes, n√©? Os tr√™s ifs v√£o funcionar tranquilo. E agora a gente vai entrar em uma pr√≥xima aresta. Ent√£o essa daqui √© s√≥ pra gente ilustrar de novo, n√©? A gente pode, a gente tem tr√™s possibilidades. E a gente foi pra auto resolver, pra pedir informa√ß√£o, ou at√© mesmo a cria√ß√£o de ticket, abrir esse chamado. Mas quais s√£o as pr√≥ximas arestas que a gente tem? Ent√£o a gente depois, n√©, por exemplo, do auto resolver, a gente pode tamb√©m finalizar esse fluxo. Ent√£o a gente pode criar uma pr√≥xima aresta. Aresta, aresta. Aresta. Isso, uma defini√ß√£o de fus√£o. Decidir. √â, daria at√© pra copiar o anterior. Aqui vai ter um agent state, vai ter um string tamb√©m. Vai ter o print. Mas decidir o que? Essa daqui? Decidir. Isso aqui pode ser p√≥s o que? Depois do auto resolver. Depois do qu√™? N√£o √© depois do triagem. √â depois do auto resolver. Ent√£o, decidir p√≥s auto resolver. Vamos ser o mais claros poss√≠veis. Poss√≠vel. E a√≠ que eu copiei, n√©? Ent√£o ele recebe um estado, n√£o um state, que torna um string. Perfeito. Decidindo, ah, claro, aqui o decidir principal era decidir ap√≥s a triagem. A gente poderia at√© ter chamado ele de decidir p√≥s triagem. Vamos fazer assim pra ficar mais claro? Pode ser. E agora √© decidido o p√≥s auto resolver. A gente pode decidir, qual s√£o as op√ß√µes que a gente tem depois do auto resolver. O p√≥s triagem podia ir pra um dos tr√™s, o p√≥s auto resolver pode ir pra um dos dois, n√©? Pros dois outros ou pro final direto. Maravilha. Ent√£o aqui, decidindo ap√≥s o auto resolver. Ent√£o, primeiro ponto. Se a gente teve um high totalmente com sucesso, a gente quer finalizar o nosso fluxo. Ent√£o a gente pode colocar um if, state, point to get, high sucesso, ent√£o, opa, o nosso high teve sucesso, a gente conseguiu executar, n√£o precisa de mais nenhuma informa√ß√£o. Dois pontos, retorna, ok ou retorna end. √â, vamos deixar ok, end, qualquer coisa assim, n√©? √â s√≥ um apelidinho que a gente t√° dando, n√©? Essas coisas s√£o apelidinhos. Uma coisa que a gente pode p√¥r aqui, antes do return, √© um print tamb√©m, como boa pr√°tica, porque ele t√° ali vendo o estado, a gente pode ver um print, high bem sucedido, indo para o fim, e a√≠, porque o return o usu√°rio n√£o vai ver, n√©? S√≥ vai acontecer no sistema. Ent√£o a gente pode colocar um print, n√£o, o print √© depois do if. Depois do if, mas a√≠ vai ter o return, ent√£o ele n√£o vai chegar no print, n√©? Ent√£o √© esse aqui antes do return, n√©? Ent√£o aqui dois pontos, fazer um print aqui dentro, n√©? Dentro desse if, exatamente, por... Ent√£o, tag com sucesso, indo para o fim, finalizando o fluxo, finalizando o bra√ßo, o fluxo, perfeito, gostei. A gente fez o get, n√©? Poderia ser tamb√©m o colchete, rag sucesso, d√° na mesa. Tanto ponto get quanto o colchete aqui com rag sucesso aqui dentro, s√£o duas formas de fazer a mesma coisa, n√©? Condicionares, basicamente. Legal, ent√£o a gente fez o if, se, rag com sucesso. Beleza, terminou. Mas tem o lado que √© o if, tem ante sucesso. Ent√£o eu acho que essa √© a outra parte, n√©? Perfeito. Que a√≠ seria um... A gente pode copiar? Seriam esses mesmos aqui da decis√£o, no caso? Ou n√£o? N√£o, porque a gente n√£o sabe qual foi. N√£o, n√£o sabe. Tem que saber qual foi a pergunta, foi enviada e o que que retornou. Ent√£o a gente vai pegar o state, n√©? T√°, ent√£o vamos pegar l√° aqui, n√©? State, pergunta. State da pergunta, algo assim, n√©? Vai receber o meu... Apar√™nteses? State... Mas a√≠ √© a resposta, n√©? State pergunta. A pergunta em si. Ele vai receber a pergunta. Ou pode ser que ele receba vazio, tamb√©m. Ent√£o ponho or, aspas s√≥, aspas dupla. Beleza. Pode colocar tudo isso dentro, desde o state at√© a√≠ dentro de um par√™nteses. Porque o que a gente vai fazer? A gente vai converter essa mensagem inteira pra depois conseguir abrir o ticket, porque a gente tem que passar as informa√ß√µes. Ent√£o voc√™ pode por ponto, lower, case, e perfeito. Fecha o par√™nteses. Ent√£o isso aqui a gente recuperou a pergunta. Porque o Ragn n√£o teve sucesso, eu quero saber qual que foi a pergunta que o Ragn n√£o conseguiu resolver. A√≠ a pr√≥xima quest√£o √©, t√°, se n√£o teve sucesso, eu preciso abrir o ticket, √© uma possibilidade. Ent√£o √© o que n√≥s vamos criar agora. Ent√£o vamos l√°, um if, n, n de, n√£o, desculpa, a-n-y. A n de ingl√™s, n√©? N de ingl√™s, sim. Mai√∫sculo ou min√∫sculo? Min√∫sculo, tudo min√∫sculo. A√≠ pode abrir par√™nteses, k, que √© a quantidade de vezes que eu vou verificar, √© dentro do state da... do nome da vari√°vel que voc√™ deu anterior, que agora t√° tampando ali. State da pergunta, isso. K em state da pergunta. Para cada, n√©? Para todos os ks dentro aqui da state da pergunta, ou algo assim, n√©? Isso, perfeito. Qualquer, n√©? Para qualquer. A gente vai pro k em state da pergunta, por k dentro das palavras-chaves de abertura de ticket que n√≥s criamos. A gente quer ver diretamente se tem aqui, n√©? Ent√£o a gente quer... t√°. A gente vai verificar se apareceu essa pergunta dentro das palavras-chaves pra a gente ir direto pra ticket. Ent√£o por k, ainda l√° dentro mesmo, do par√™nteses. √â aquele jeito que a gente falou aqui, √© mais complicadinho de escrever, n√©? Em keywords, ele j√° at√©... abrir ticket, return, abrir chamado. Beleza, ent√£o ele t√° falando, √≥, galera, se der ok, vai pro final. Hag com sucesso, finalizando o fluxo. Se n√£o, pega a√≠ a pergunta pra mim e verifica se tem alguma dessas palavras, que a√≠, se tiver, eu vou retornar um abrir chamado. E, √∫ltimo caso, retorna o pedirinho. A gente pode s√≥ colocar um print tamb√©m, s√≥ pra seguir ele antes do return do abrir chamado. Falando, √≥, o Hag falhou, mas eu encontrei a keyword, ent√£o, indo pro ticket. Alguma coisa assim. Mas, foi, foram encontradas keywords de abertura de ticket. Abrindo. 6 pontos, ups. Perfeito. E aqui tamb√©m, n√©, antes do pedirinho, eu acho que vale a pena, n√©? Vale, vale. Hag falhou. 100 keywords que eu n√£o encontrei. Ent√£o, indo pra pedir mais informa√ß√µes, n√©, Orin? Vou pedir mais informa√ß√µes. Boa. Maravilha. Essa aqui √© a nossa fun√ß√£ozinha do... Todos os casos est√£o atendidos, n√©? Caso ok, o caso de abrir chamado e o caso de pedir info, que eram os tr√™s casos, as tr√™s arestas aqui do auto resolver. Perfeito. Desse n√≥. Boa. Algo mais? Pra mim, √© isso. Dessa parte, acho que √© isso. Foi, n√©? Decidimos essas arestas e o resto tamb√©m j√° t√° decidido. Exatamente. Basicamente. S√≥ vai pro final direto, basicamente, do pedirinfo, do abrir chamado, n√©, nesse caso, desse nosso exemplo aqui. Legal. E agora, no come√ßo da aula, n√≥s falamos, vendemos aqui, n√£o, long graph √© super bom, √© super... Mas n√£o usamos long graph ainda, n√©? Agora √© que a gente vai usar. S√≥ que agora √© que a gente vai usar. Mas, ah, porque agora que n√≥s vamos criar, criamos os n√≥s, como que funciona, os estados, como que a gente conecta tudo? Perfeito. No graph. Ent√£o, vamos l√°. Bora. Ent√£o, primeiro a gente come√ßa importando, n√©, o long graph. Ent√£o, from long graph.graph import long graph.graph import state graph o estado do graph. V√≠rgula start, n√©, que √© o come√ßo. Start mai√∫sculas, n√©? E o end tamb√©m mai√∫scula. Come√ßo e o final do graph. Exatamente. E a gente pode come√ßar criando uma vari√°vel chamada workflow pra gente trazer o agent state pro state graph. Ent√£o, a gente vai ter o state graph, que a gente acabou de importar, e trazer informa√ß√£o do agent state. Ent√£o, ele vai ficar aqui dentro, vai ser um argumento. E vai ser um argumento dentro do state graph. Esse nosso agent state aqui, n√©? Isso. Ent√£o, aqui a gente t√° falando, n√©? Respeite esse agent state. O estado do grafo, n√≥s vamos sempre respeitar o agent state que n√≥s criamos anteriormente. Boa. A gente vai fazer agora a defini√ß√£o de n√≥s, finalmente. Aqui s√£o literalmente desenhar por texto. Exato. Basicamente, n√©? Ent√£o, primeiro a gente vai come√ßar, n√©, com o workflow.addNode. Ent√£o, add, de adicionar node, adicionar um n√≥. Primeiro n√≥, qual que vai ser? O da triagem. J√° diret√£o, assim? Isso, que a gente come√ßa com o da triagem. Eu acredito que sim, depois... Sim, sim, sim. Isso me lembra uma coment√°ria aleat√≥ria, n√©? Quem usou Keras pra criar redes neurais √© muito parecido, porque uma rede neural acaba sendo um grafo. E a√≠ tem muito isso no Keras, que abstrai tamb√©m toda a complexidade. Voc√™ vai adicionando ali os n√≥, como se fosse uma convolucional, adiciona uma camada convolucional a outra camada, e assim vai. Mas, enfim, fechar do coment√°rio aleat√≥rio. √â um bloquinho, ent√£o agora a gente vai definir os n√≥, que foi o que a gente fez aqui, n√©? Ent√£o a gente vai usar essa fun√ß√£o, n√≥, nodeTriagem. NodTriagem, perfeito. Que associamos a essa palavra triagem aqui. A gente vai repetir esse processo pra todos os n√≥. Ent√£o, eu vou dar um Ctrl C, Ctrl V quatro vezes, n√©, porque a gente tem um, dois, tr√™s, quatro n√≥, correto, n√©? Ent√£o, o segundo n√≥ era o Autoresolver, ent√£o vamos l√°, Autoresolver, correto? T√¥ pensando certo? Perfeito, √© isso mesmo. Ent√£o, voltamos l√°, pegamos aqui essa fun√ß√£o, que √© a nodeAutoresolver, ela que vai ficar respons√°vel por esse n√≥ do grafo, o outro vai ser o PedirInfo, que aqui vai ser nodePedirInfo, e, por fim, vai ser o Abrir Chamado, a gente chamou e a gente chamou tamb√©m de nodeAbrirChamado, esse nozinho. Bom, os n√≥ est√£o definidos do workflow. Est√£o conectados, a gente definiu anteriormente, agora a gente conectou eles aqui. Conectou a fun√ß√£o respons√°vel por eles, n√©? Perfeito. E agora a gente precisa conectar desde a entrada desse grafo at√© o roteamento das arestas, porque agora a gente tem os n√≥ soltos, e n√£o adianta nada, agora a gente tem que conectar todo mundo. Boa. Eu vou usar o workflow tamb√©m, imagina? Isso. .add, add, underline, add. Aqui, n√©? O nod √© um n√≥ do meio, o add √© de ser da borda, o come√ßo ali. S√£o as arestinhas mesmo, n√©? A gente vai adicionar essa conex√£o aqui, todas as conex√µes. E por onde que a gente vai come√ßar? A gente come√ßa pela triagem, ent√£o a gente vai colocar nesse primeira linha, workflow.add, underline, add, a gente vai dar o start, onde? No n√≥ da triagem. Ent√£o aqui eu vou come√ßar no start, nesse start que a gente come√ßou, voc√™ est√° indicando para o lang graphic, este √© o come√ßo. Isso. E a√≠ depois vamos para o n√≥, o texto triagem, que a gente conectou a varia... a fun√ß√£o node triagem que faz as coisas l√°. Esse √© o nosso primeiro add, mas vamos olhar aqui, n√©? Esse √© o entry point do nosso gr√°fico, a gente j√° entrou entrando, legal. Foi a primeira op√ß√£o. Agora, essa daqui √© meio que √≥bvia, n√©? S√≥ tem uma poss√≠vel na sequ√™ncia. Agora, o pr√≥ximo do triagem, para qualquer uma das outras tr√™s op√ß√µes, ele √© uma... como eu falei, n√©? S√£o op√ß√µes, s√£o alternativas, n√£o √© uma sequ√™ncia direta, n√©? Ent√£o n√£o vai ser a mesma coisa do add, add? Ou vai ser um add, add? √â a mesma coisa, s√≥ que ele √© um add condicional. Ent√£o ele tem uma condi√ß√£o, pode ser para qualquer uma das possibilidades que a gente tem. Perfeito. Ent√£o quando voc√™ come√ßa a add, aqui ele j√° continua com add conditional edges. As arestas condicionais. Ent√£o a primeira vai ser, por exemplo, o qu√™? Decidir a principal. Ah, boa. A principal, n√©? Que a gente at√© mudou o nome, n√©? Para decidir p√≥s-triagem. Exatamente. Ent√£o vai o qu√™? De triagem para decidir, ou como √© que funciona isso? Triagem, entre aspas, v√≠rgula, decidir p√≥s-triagem. E a√≠ a v√≠rgula abre chaves. Isso. Claro, n√©? Porque ele recebe um edit... Mas aqui tamb√©m recebia. A gente n√£o finalizou ainda. Ent√£o depois de decidir a triagem, ele vai decidir para onde ele vai. Pode abrir chaves. E quais s√£o as possibilidades? Isso. Ent√£o s√≥ lembrar, quais s√£o as possibilidades do depois da triagem, n√©? A gente pode ir para tr√™s lugares diferentes. O auto resolver, pediria info, abrir o chamado, n√©? Exato. E a√≠ eu vou botar esses caras aqui, esses tr√™s textos, √© isso? S√≥ isso? Ah, maravilha. Para ficar um pouco mais f√°cil de entender, Fabr√≠cio, eu vou pedir para voc√™, depois de decidir p√≥s-triagem, coloca uma v√≠rgula e depois do da chaves, d√° um enter, por favor. Isso. Ent√£o a gente tem o auto resolver, que foi o n√≥ que n√≥s criamos. E l√° em cima, no c√≥digo anterior, a gente chamou ele tamb√©m de auto resolver, certo? Correto. Ent√£o √© auto resolver dois pontos auto resolver, para referenciar tanto no workflow quanto l√° na defini√ß√£o que n√≥s fizemos. A√≠, perfeito. Vamos para o pr√≥ximo, que √© pedir info. √â, precisa de uma v√≠rgula, depois auto resolver? Porque a gente est√° num dicion√°riozinho aqui, n√©? Ele meio que j√° √© completo. Deixa eu apagar esse resto aqui, mas √©. Pensa a mesma coisa para os tr√™s, n√©? Ent√£o... Ent√£o meu conditional √© de ele entrar no triagem, usa essa fun√ß√£o decidir p√≥s-triagem para decidir para onde ele vai depois. Fun√ß√£o que n√≥s definimos √© acima e aqui. E a√≠ se for auto resolver, retorna esse texto auto resolver. O pedir info, abrir chamado. E aqui mesma coisa, n√©? Para onde for, ele vai mandando. E aqui, auto resolver √© esse n√≥, pedir info √© esse n√≥, abrir chamado √© esse n√≥. Eu acho que isso aqui talvez pode causar uma confus√£o, n√©? Porque a gente tem algumas coisas com o mesmo nome. Mas aqui, √≥, esse √© o decidir p√≥s-triagem, ele retorna algum texto, qualquer um que seja, que aqui a gente chamou de auto resolver, para ficar mais simples, mas a√≠ acabou, √≥, acabou se repetindo v√°rias vezes, n√©? Mas √© esse, n√©? Esse cara que ele retornou aqui do decidir p√≥s-triagem √© esse primeiro auto resolver e esse segundo √© esse cara aqui do n√≥. Se voc√™ quiser, pode mudar isso daqui, n√©? Botar para auto, info e chamado. Talvez fique mais claro assim, e indo mais para baixo, n√©? Ent√£o se for auto, vai para auto resolver. Isso. Se for info, vai para pedir info, n√©? Para o n√≥ pedir info que a gente definiu aqui relacionado a essa fun√ß√£o. Exatamente. E se for chamado, vai para o n√≥ relacionado a abrir chamado. Ent√£o fica mais tranquilo, mais claro. Mas para elencar de onde est√° vindo cada coisa. Se colocar tudo no mesmo nome, fica mais complexo. Perfeito. Bom, daqui, o pedir info e o abrir chamado j√° v√£o para o end, mas o auto resolver n√£o necessariamente, n√©? Ele tem um condicional aqui tamb√©m, n√©? Pode ser tr√™s op√ß√µes ele tem. Exato. Ser√° que vai ser igual, ent√£o? Ele √© bem parecido. Ent√£o vamos l√°. √â bem parecido. A gente pode copiar. Que √© um conditional edges. O nome agora √© auto, que a gente mudou. Esse auto √© o outro, n√©? Esse aqui √© o auto resolver. O n√≥ √© o auto resolver. Auto resolver, perfeito. E a√≠ ele vai pegar a fun√ß√£o decidir p√≥s auto resolver. P√≥s auto resolver. E a√≠ ele tem tr√™s op√ß√µes, n√©? Que √© o... Que vai ser pedir informa√ß√£o, abrir o ticket, abrir o chamado, ou finalizar. Ou finalizar. Voc√™ pode apagar a primeira linha, as outras duas ficam iguais, porque ele pode ir para o info, para o chamado, e a√≠ vai ter a final que √© um ok de finaliza√ß√£o mesmo. √â o nosso end. Tem um ok mesmo aqui? Pode por um ok. Que √© o que a gente tinha dado l√° aqui, n√©? A gente falou return ok. Return abrir o chamado, return pedir info. Ah, ent√£o essa aqui tem que ser... Essa aqui t√° diferente tamb√©m. Se eu mudei aqui, eu tenho que mudar aqui tamb√©m. Olha s√≥. Porque os retornos, esse aqui √© o retorno da fun√ß√£o. Agora ficou mais claro, √≥. Tanto o retorno da fun√ß√£o de p√≥s-triagem, quanto o retorno da fun√ß√£o de p√≥s-auto resolver agora est√£o alinhados. Perfeito. Ent√£o aqui s√£o tr√™s op√ß√µes. Ok chamado ao info. Ent√£o, ok. Que a√≠ termina, n√©? Ent√£o a gente chama o end. O chamado chama, aqui esse n√≥ do abrir o chamado. E o info chama o n√≥ do pedir info que t√° associado a essa fun√ß√£o. Beleza. E agora a gente tem que fazer dos outros tamb√©m? Agora fazer os finais. Os ends, n√©? Queria at√© sugerir aqui pra gente, n√©? Ent√£o, se chegou no pedir info, depois do pedir info, s√≥ vai pro end. E o chamado tamb√©m s√≥ tem uma op√ß√£o de aresta pro end. Acho que √© isso, n√©? Finalizamos. Agora s√≥ falta uma √∫ltima linha que √© compilar esse grafo. Ah, boa. Ent√£o a gente criou tudo, a√≠ √© a √∫ltima linha pra compilar. A gente vai dar um nome pra isso, que a gente t√° criando. A gente pode p√¥r o nome de app, ou... Orkflow? Orkflow, grafo, nome que a gente quiser. Grafo. √â igual ao Orkflow, que √© o nome que a gente t√° usando ali, e √© ponto compile. Compile, metodinho, a gente coloca aqui um, abre e fecha par√™nteses. E perfeito. Salvamos na vari√°vel grafo. Isso, mas agora a gente quer, a gente montou tudo bonitinho, t√° tudo conectado. Mas seria muito bacana se a gente pudesse visualizar como isso ficou. Porque a gente desenhou aqui, mas como √© muito c√≥digo, n√©? Vamos ter certeza que t√° tudo ok. Exato. E pra isso a gente pode importar uma biblioteca. A gente pode fazer o from if python.display ponto display. Isso, import display. Calma, from if python import display? Ou from python.display? Ah, t√°. Import display, v√≠rgula, image. Ent√£o porque a gente quer gerar essa imagem e visualizar esse grafo que a gente fez. Perfeito. Tudo assim mesmo em min√∫sculo, mai√∫sculo, tem diferen√ßa? O imai√∫sculo do image. Do image. Isso, o imai√∫sculo. Beleza. Ent√£o agora pra exibir esse grafo, a gente vai usar o graph, underline bytes, √© igual ao app que a gente fez o o grafo aqui, n√©? A gente chamou de qualquer coisa. O grafo, ponto get graph get graph, peguei aqui, √© entre par√™nteses, a√≠ pronto, ponto, draw, underline mermaid, underline png. Ent√£o a gente vai usar essa biblioteca do mermaid pra desenhar uma imagem formato png, n√©? Exatamente. √â um m√©todo, abre e fecha par√™nteses. E a gente vai fazer o display dessa imagem. Ent√£o por isso que a gente chamou o display aqui em cima, n√©? Exatamente. Beleza. O display a√≠ abre par√™nteses, image, que a gente tamb√©m fez um import, e o nosso graph bytes que a gente copiou aqui. Exatamente. Vamos dar dessa vari√°velzinha. Se tudo deu certo, vai formar. Deveria ter... Olha que bonito. Eu vou at√© dar um zoom alto pra gente ver tudo ao mesmo tempo. Ent√£o vamos ver se as coisas fazem sentido agora, n√©? Espero que sim. Olha, tem muito chamado aqui, n√©? Muitos textos. E eu acho que aquela coisa da gente mudar os nomes talvez tenha criado alguma confus√£o a mais desnecess√°ria, n√©? Mas aparentemente estou ok, n√©? Vem no triagem, se for alto, vai pro alto resolver. Se for ok, vai pro end, vai pro final. Perfeito. Se for alto, ali√°s, se for triagem, foi chamado, vai pro abrir chamado, final. Info, vai pro pedir info final. E tem aquele caso extra, n√©? Do foi alto, mas n√£o conseguiu resolver. Pode pedir o chamado, ou pode pedir o info, e a√≠ de l√° pro final tamb√©m. Parece que t√° tudo ok, n√©? T√° tudo certo. Coisa linda. Muito bom. Deu certo. Ent√£o agora a gente j√° consegue rodar o nosso grafo? Agora √© testar o nosso agente. Testar o agente final? Vamos l√°. Eu vou usar o mesmo teste de antes, pessoal. Da aula 1 e da aula 2, n√©? Essas perguntas que a gente criou aqui, n√©? Podemos. Como √© o teste final, eu poderia at√© acrescentar mais algumas perguntas, n√©? S√≥ pra deixar mais complexo aqui. Eu vou deixar da capivara por √∫ltimo ainda, mas... Pode perguntar, por exemplo, se tem como reembolsar certifica√ß√µes do Google Cloud. Legal. Pergunta tamb√©m se tem como ter o Gemini de gra√ßa. Posso obter o Google Gemini de gra√ßa? Pergunta qual que √© a palavra chave da aula de aula de aula de gra√ßa. Gostei, gostei. Qual √© a palavra chave? Aproveitando, dona Carol, qual que √© a palavra chave da aula de hoje? Deixa voc√™ decidir, fica √† vontade. Nossa, ent√£o t√° bom. A palavra chave dessa aula √© Langue Graph. Langue Graph. Inclusive vai estar escrito aqui se voc√™ n√£o sabe como escrever, mas √© s√≥ lembrar que voc√™ importou aqui em cima, n√©? Langue Graph com PH no final, tudo em marildesculo. Essa √© a palavra chave da terceira aula. Fui um pouco criativa. N√£o, eu gostei. L√° est√° no assunto da aula. Gostei, gostei. N√£o julgo. Ent√£o vamos l√°. Teste, salvamos aqui, agora tem mais perguntas do que antes. E eu vou criar o nosso c√≥digo que vai rodar finalmente esse grafo que eu fa√ßo. Da mesma forma que n√≥s fizemos anteriormente, como s√£o v√°rias perguntas, temos que criar o for pra fazer as intera√ß√µes de chamada. Ent√£o for... Messagem de teste, como a gente tava fazendo antes, n√©? Exato, pra cada mensagem que a gente tem. S√≥ que agora a gente vai de vez de s√≥ chamar o LLM, como n√≥s fizemos na primeira aula, ou passar minimamente pra aquele RAG na segunda, agora n√≥s vamos inicializar esse grafo todo. E fazer ele funcionar. Ent√£o vamos l√°. A primeira parte √© de fato invocar o nosso grafo. Como a gente faz? A gente vai p√¥r a resposta final, que √© o que vai ser gerado, √© igual ao grafo, que √© o nome que n√≥s demos. A vari√°vel que a gente deu aqui em cima. E o ponto invoke. Ent√£o √© o mesmo invoke de sempre, n√©? A gente j√° viu usando desde a aula 1. S√≥ que na aula 1, invoke invocava s√≥ o LLM. Na aula 2, invocava o RAG. E aqui na aula 3, ele vai invocar o nosso grafo completo. O agente completo. Agentes de RAG, ent√£o vamos l√°. Passou alguma coisa? Passou a pergunta, imagina. Ent√£o, abrir e fechar chaves. Entre aspas, pergunta, dois pontos, MSG, de mensagem. Tem isso de teste, que a gente chamou aqui. Chamamos o grafo, estamos passando pra ele esse dicion√°rio, um chave-valor, com pergunta, e essa, tipo, um por um, dessas perguntas aqui. Beleza. Continuamos? Agora, a gente... Vamos pra triagem. Ent√£o a gente obt√©m o resultado da triagem, e a√≠ se existir, a gente vai usar o GET pra evitar algum erro, assim, caso uma palavra n√£o esteja presente. Ent√£o vamos l√°. Triagem, ou triagem, pode ser, √© igual resposta final, ponto GET, e abre dentro, isso, dentro de aspas, triagem, v√≠rgula, abre e fecha chaves. √â, v√≠rgula fora das aspas, abre e fecha chaves. Porque ele √© um dicion√°rio. Isso. A gente pode fazer s√≥ alguns prints agora, s√≥ pra gente entender o que est√° acontecendo dentro desse for. Ent√£o a gente pode fazer o print da mensagem, da pergunta, no caso, a mensagem teste. Ent√£o, vou botar aqui, pergunta, dois pontos, mensagem teste, por exemplo. Pode colocar um F ali no come√ßo pra ficar mais bonitinho. Voc√™ gosta de F-string, n√©? Eu j√° percebi isso aqui, n√©? Eu tamb√©m gosto, eu tamb√©m gosto. Ent√£o vamos l√°. Imprimimos a pergunta. A gente pode tamb√©m imprimir as informa√ß√µes de decis√£o, da urg√™ncia, da a√ß√£o final. T√°. √â, porque a partir do momento que entra a pergunta, o nosso processo, porque o que vai acontecer? O grafo est√° criado. Vai passar por tudo e vai chegar na decis√£o, mas a gente quer meio que visualizar o que est√° acontecendo, que √© o que a Carol trouxe. Ent√£o a partir do momento que passou pela triagem, o pr√≥ximo, passou pela resposta, o pr√≥ximo ponto √© sair dessa decis√£o. Ent√£o a gente d√° esse print, o que foi decidido, n√©? Qual foi a urg√™ncia, qual foi a a√ß√£o final? A decis√£o, qual foi? Ent√£o vai ser triage, o triage aqui, n√©? Isso, a gente criou. .get E n√≥s vamos l√° buscar decis√£o. Isso. Aqui, n√©? Dentro, decis√£o, decisal, isso. Que ele vai ser tamb√©m aqui, uma decis√£o tamb√©m √© um dict. Ent√£o ele tamb√©m vai ter isso? Ou eu estou viajando? N√£o precisa. S√≥ o get decis√£o. A√≠ depois da chaves. A gente n√£o recebe s√≥ a decis√£o, a gente recebe tamb√©m o tipo da se √© urgente ou n√£o. Ent√£o vamos l√° colocar o... V√≠rgula aqui. Urg√™ncia. Ele j√° deu aqui pelo menos de urg√™ncia, n√©? Urg√™ncia, perfeito. A gente est√° reclamando aqui, √≥. Eu n√£o fechei alguma coisa, par√™nteses. Eu acho que errou, √©, de novo, √© o erro de... De aspas duplas. A gente come√ßa com aspas duplas, o que for, ali dentro a gente tem que usar aspas simples, sen√£o ele reclama e se confunde. Beleza. E faltou a a√ß√£o final. Verdade, a√ß√£o final. Porque ele pode come√ßar numa a√ß√£o do auto resolver, mas a a√ß√£o final vai ser pedir info ou alguma outra coisa nesse sentido, n√©? Exatamente. Vamos l√°. E a√≠ eu... A gente pode printar a resposta tamb√©m. Uhum. A√ß√£o final, espera a√≠. Vai ser resposta final, ponto get a√ß√£o final? Ele que sugiriu aqui pra mim, n√©? Ele n√£o vem do tri√°gue, ele vem do a√ß√£o final, do final do gr√°fico. Perfeito. Resposta final, ponto get, est√° certinho. E a√≠ a Carol sugiriu que a gente printasse tamb√©m a resposta final, n√©? Exato. √â o resposta final, essa vari√°vel, ponto get resposta. Isso, perfeito. Ent√£o, olhando ali, o resposta final, o que ele vai ser? Ele √© do tipo grafo. Ele recebe a nossa vari√°vel grafo, a resposta final da nossa vari√°vel grafo. Olhando o grafo, ele √© um workflow compile. Olhando o workflow, ele √© o state graph de agent state e olhando o agent state √© o que a gente definiu no come√ßo dessa aula. Exato. Ent√£o tudo faz sentido. Tudo se conecta. Ent√£o t√° tudo conectado. Exatamente. A √∫nica coisa que a gente pode adicionar, que n√≥s adicionamos na aula passada, que se houver o uso do HAG, √© legal a gente saber da onde que veio as informa√ß√µes para gerar aquela resposta. Ent√£o se a gente quiser, podemos gerar a roda a primeira vez assim, mas depois a gente pode adicionar igual n√≥s adicionamos na aula passada as cita√ß√µes para saber da onde que veio as informa√ß√µes do HAG, caso da resposta. Que √© legal para ter esse log. Mas podemos executar assim. N√£o, eu gosto. Vamos fazer agora j√°? Ent√£o vamos l√°. Vamos fazer mais print, n√©? Aqui, imagina? Ou a gente tem que fazer um forzinho ali no... Um ifzinho? Um ifzinho, n√©? Se tiver. Se tiver cita√ß√µes. Ent√£o if respostaFinal Olha, j√° pego aqui pra mim, n√©? Ent√£o se respostaFinal .get cita√ß√µes Ou seja, se houver cita√ß√µes, se n√£o for NULL, print a palavra cita√ß√µes e depois faz um for das cita√ß√µes, no caso. Porque √© uma listinha, voc√™ lembra? Uma lista de cita√ß√µes. Pode ter mais de uma. E a gente pode literalmente copiar. Ele j√° estava me sugerindo l√°, mas a gente pode literalmente copiar isso aqui que a gente j√° fez na aula 2 e colar aqui, n√©? Que √© o documento, aqui √≥, pra cada C de respostaFinal cita√ß√µes. C isso aqui √© de C de cita√ß√£o. T√°, ele chamou aqui. A gente poderia tamb√©m mudar o nome. Poderia chamar pra cada cita√ß√£o. Se voc√™ acha que fica mais claro, eu acho. E aqui, n√©? Pegar o documento, a p√°gina e o trecho. No nosso caso, s√≥ tem uma p√°gina, todos os documentos. No seu caso poderia ter 57 p√°ginas. E a√≠ √© mais f√°cil saber que est√° na p√°gina 43. E agora, bora rodar? Bora rodar. E esse print acho que tem que estar fora, n√©? Esse print d√° pra separar. √â pra c√°? N√£o, tem que estar dentro do for. T√° fora do if e dentro do for. Exatamente, perfeito. Maravilha. Vamos rodar. Esperando. √ì, executando o n√≥ de estriagem, decidindo. E aqui ele deu algum erro. E olha, ele t√° indicando exatamente onde foi aqui, n√©? L√° nos cita√ß√µes, no update, resposta-hag das cita√ß√µes, a gente tentou fazer do jeito padr√£o, n√©? Do jeito com os colchetes, n√©? De acessar dicion√°rio. Mas eu acho que ele n√£o vai gostar aqui, √≥. N√£o vai gostar de fazer a lista. Ent√£o vamos fazer do outro jeito, que √© o ponto get, n√©? Que a gente mencionou que √© os dois jeitos de tratar dicion√°rios. Ent√£o vamos voltar l√° aqui no node auto resolver, n√©? O nosso n√≥ do auto resolver. E aqui em vez de ser esses cita√ß√µes, √© o colchete, cita√ß√µes, tal, vai ser um ponto get. Cita√ß√µes. E a√≠ passando cita√ß√µes e a lista, n√©? Isso aqui j√° deve resolver essa situa√ß√£o. Ent√£o vamos rodar novamente o node auto resolver. S√≥ pra garantir rodar novamente esse bloquinho aqui do grafo, porque ele usa o auto resolver, n√©? Ent√£o ele usa aqui, n√©? Ent√£o pra limpar talvez ele tivesse com o antigo na mem√≥ria. Ent√£o rodamos aqui tamb√©m. E agora vamos rodar aqui o nosso for final, executando o n√≥, auto resolver, √≥. Foi. T√° indo. E aqui, todos aqueles os prints que a gente deu est√£o enchendo um pouquinho aqui, n√©? Estamos atrapalhando um pouco. √â, mas √© legal que a gente vai acompanhando, n√©? O que est√° acontecendo. Executando, decidindo, executando, decidindo. Rague com sucesso, pergunta. Vamos passo a passo aqui. Pergunta por pergunta. A primeira pergunta, posso reembolsar a internet? Ele fez o n√≥ da triagem, decidiu depois do n√≥. E a√≠, √≥, executando o n√≥ de auto resolver. Que √© o Rague, n√©? Ent√£o reembolsar a internet √© uma coisa que talvez eu tenha dentro do Rague. Decidindo ap√≥s o auto resolver, que √© o pos, n√©? Decis√£o, decidir pos. Rague com sucesso. Rague com sucesso finalizando o fluxo. A decis√£o, comecei por auto resolver, a urg√™ncia era baixa. A a√ß√£o final ele ficou no auto resolver mesmo, n√©? N√£o passou pra nenhum outro. E a√≠ deu a resposta sim, internet para o Romeo F. Rebaus, reembols√°vel, com subs√≠dio, a mesma que ele tinha dado l√° na aula dois. E passando as nossas cita√ß√µes aqui, n√©? De onde que ele tirou essa informa√ß√£o. Gostei. O segundo. Aqui, Fabr√≠cio, desculpa, s√≥ fazer um... Acho que vale um adendo s√≥ pra tamb√©m ficar claro. N√≥s colocamos todos esses prints porque n√≥s somos o desenvolvedor, os desenvolvedores do agente. Ent√£o √© legal a gente saber tudo que est√° acontecendo. Pro usu√°rio final, s√≥ iria a resposta. N√£o iria aparecer tudo isso. N√£o precisa mostrar tudo que est√° acontecendo. Todo o racioc√≠nio que tem por tr√°s do nosso agente, n√©? E tipo, a gente gosta de ver essas coisas tamb√©m e a gente quer mostrar pra voc√™ que est√° em casa, pra voc√™ ver o fluxo, se est√° tudo ok. E esses prints s√£o √≥timos pra debugar. Ent√£o assim, poxa, que travou aqui, subiu at√© esse print. Ent√£o a gente j√° tem uma no√ß√£o de onde deu erro. Mas depois, quando voc√™ for produtizar, que essa √© uma outra etapa dos agentes, a√≠ voc√™ limpa esses prints. Exato. A√≠ o outro, n√©? Quero 5 dias de trabalho remoto, como eu fa√ßo? Node triagem, decidindo depois. Ele foi no node abrir chamado, que est√° certo, que √© coisas extra. Ent√£o come√ßou no abrir chamado, urg√™ncia m√©dia. Terminou no abrir chamado mesmo. Resposta. Abrindo chamado com urg√™ncia m√©dia. Descri√ß√£o, a√≠ que era a pr√≥pria pergunta, que a gente s√≥ copiou a pergunta. O terceiro. Posso reembolsar cursos ou treinamentos da Alura? Mesma coisa, n√©? De auto resolver pra auto resolver. A gente j√° tinha feito na aula dois, n√£o vou repetir aqui, mas tem esse novo. Carol, posso? √â poss√≠vel reembolsar as cient√≠fica√ß√µes do Google Cloud? Foi pro auto resolver aqui, n√©? Executou, decidiu depois. Come√ßou e terminou no auto resolver. E √© meio que a mesma resposta, n√©? Exato. Cursos e certifica√ß√µes s√£o reembols√°veis. Aqui era mais exigem aprova√ß√£o pr√©via, aqui desde que haja aprova√ß√£o pr√©via. Meio que a mesma coisa. Aquela temperatura zero ali, n√©? Muda s√≥ um pouquinho e n√£o tenha muita criatividade, segue o padr√£o da resposta. E tem que levar de casa, n√©? Aumentar a quantidade de caracteres que a gente colocou 140, n√£o foi? √â, foi 140 de limite aqui na abertura de chamado. E tamb√©m aumentar a temperatura. Fazer testes e tudo mais, n√©? Aqui, √≥, a triagem tamb√©m. Opa! Eu j√° vi aqui um RAB falhou, que a pergunta era, posso obter o Gimini de gra√ßa? Ent√£o, olha, ele foi no triagem, decidiu, depois ele foi pro auto resolver, porque √© uma coisa que poderia ter l√°, n√©, puta? Eu tenho acesso a IAZ gratuitamente aqui na empresa. E a√≠, depois do auto resolver, ele foi, o RAB falhou e n√£o tem keywords, n√©, de obter, de gra√ßa. Vou pedir mais informa√ß√µes, executando o node pedirinfo. Ent√£o, ele come√ßou no auto resolver, vamos olhar no grafo aqui, foi, terminou no pedirinfo, que √© aquela situa√ß√£o que a gente falou, que ele come√ßa aqui, depois ele vai, opa, pedirinfo, antes de ir pro end, n√©, antes de ir pro final. E a√≠, a resposta pra avan√ßar, precisa que voc√™ detalhe o tema e contexto espec√≠fico, e a gente poderia colocar, n√©, de Gimini, a pergunta, repetir a pergunta. Uma conversa, n√©, alguma coisa assim, perfeita. Poderia at√© repetir, n√©, a pergunta aqui, igual a gente fez no, do reembolso, n√£o, do reembolso, n√£o, do remoto, que a gente s√≥ repetiu a pergunta, poderia ter repetido a pergunta aqui, enfim. A√≠, tem o qual √© a palavra-chave da aula de hoje, porque ele ficou totalmente perdido, tipo, isso n√£o faz sentido, e a palavra-chave era? Link chain, n√£o, n√£o, n√£o, n√£o √© link chain, n√£o, √© link graph. Boa. E a√≠, ele j√° foi direto pra pedir informa√ß√£o, n√©, ou seja, triagem, pedirem info end aqui no nosso fluxo do grafo, e a√≠, quantas capivaras existem no Rio Pinheiros, a mesma coisa, n√©, ele fica perdido e vai pedir informa√ß√µes diretamente. Pessoal, Carol, terminamos, olha, eu t√¥ orgulhoso, do nosso nosso trabalho juntos aqui, conseguimos criar juntinhos aqui um agente do zero, desde a estrutura de chamar o LLM. Vamos voltar aqui, porque eu quero mostrar pro pessoal de casa tudo que a gente fez. A gente instalou, conectou com a API l√° do Gemini usando o link aqui, n√©? O link que a gente passou pra voc√™s, o link parametrizado, fez uma primeira conex√£o pra testar, um prompt que a gente fez na aula 1, mas √© o mesmo prompt que a gente est√° usando agora, n√©? Esse prompt de triagem. Baseou usando Pydantic aqui, o que seria a decis√£o, quais tr√™s tipos de decis√£o a gente teria, urg√™ncia. Depois fez isso pras primeiras chamadas pra ver se estava funcionando. Na aula 2, a gente conectou ali os PDFs, n√©? Fez o upload deles usando essa PymopdfLoader, pegamos os chunks, a gente aprendeu tudo sobre embeddings, n√©? O que s√£o, como usar, guardamos aqui na nossa Vector Store esse retriever que ele pega a partir de uma pergunta e com esse prompt aqui do ragzinho, n√©? Isso daqui que a gente s√≥ botou depois pra formatar, pra ficar bonitinho, mas a fun√ß√£o principal que era de fazer a pergunta, n√©? E buscar l√° no rag pra qualquer uma dessas perguntas buscar uma resposta. Por exemplo, o faz tamb√©m? O faz, a verdade, n√©? Que encontra a similaridade e a proximidade dos embeddings, dos vetores de embeddings. E aqui na aula 3, que acabamos de fazer, o nosso desenho foi o mais dif√≠cil desse agente. Completo, cara. Completa√ßo. E, assim, na minha vis√£o, quero complementar voc√™s. Fizemos um agente completo. Acho que agora, se voc√™ quiser evoluir, √© muito... Poxa, d√° pra melhorar o prompt? Talvez d√° pra fazer ajustes, d√° pra melhorar quantos chunks eu quero, fazer uns ajustes que n√≥s falamos, mas o agente est√° prontinho, completo, fim a fim. Muito legal. Exatamente. E o melhor √© assim, que a gente tinha comentado v√°rias vezes durante essas tr√™s aulas. Esse aqui √© um exemplo, mas voc√™ pode analisar o seu contexto de neg√≥cios, o que voc√™ precisa, e adequar esse agente, porque o princ√≠pio √© o mesmo. E adequar o agente pra sua necessidade, pra necessidade da sua empresa, do que voc√™ quiser criar. Exatamente. E, como a gente j√° falou, tamb√©m incentivamos voc√™ a criar alguma coisa, esse com a gente, claro, n√©? Fazer juntinho, mas fazer alguma coisa sua, alguma coisa que tenha a ver com o que voc√™ gosta, ou com o seu trabalho, com a sua empresa, e compartilhar no Discord, perguntar l√°, tirar d√∫vidas, compartilhar nas redes sociais, compartilhar no LinkedIn, no X, me marca l√°, Fabr√≠cio Carraro, marca Carol Carneiro, marca o Vin√≠cius Carellad√°. A gente vai gostar muito de ver o que voc√™ fez al√©m, n√©? Porque √© uma coisa voc√™ fazer, aprender junto com a gente, que √© muito legal, sucesso, mas a outra coisa que a gente gosta mais √© quem vai al√©m, quem vai ao pr√≥ximo passo. Que pode ser um collab, assim mesmo, s√≥ com texto, ou pode ser, como a gente falou no final da LA2, conectar uma coisa do front-end, uma coisa bonitinha, um streamlit, talvez, se voc√™ n√£o sabe o que √© streamlit, pergunta no Discord, pergunta pro GemiNai, um Gradle, que √© a mesma coisa que o streamlit, basicamente, mas fazer alguma coisa que voc√™ pode inclusive rodar dentro do collab. √â super f√°cil, voc√™ pode rodar num VS Code, pode rodar e publicar l√° no pr√≥prio streamlit, enfim, no GitHub, publicar... Infinitas possibilidades. Possibilidades, e eu vou querer ver isso, eu vou querer que voc√™ me marque no LinkedIn, nas redes sociais, com o seu projetinho l√°. E pessoal, um recadinho os finais, n√©? Lembrando que se voc√™ acompanhou todas essas tr√™s aulas com a gente, voc√™ vai ter direito ao certificado aqui da imers√£o de agentes de Adalura com o Google GemiNai, vai ter o certificado das duas empresas l√° pra voc√™ publicar nas suas redes tamb√©m. E pra ter acesso, voc√™ vai ter que ter gravado e marcado as tr√™s palavras-chave das tr√™s aulas, e a gente vai passar acho que daqui a uma semana, mais ou menos, a gente vai explicar melhor na live de encerramento, quando que voc√™ vai receber o certificado, por onde e tudo mais. Ent√£o, n√≥s tr√™s, imagino que... Espero! Se nada acontecer, nada errado acontecer, n√≥s tr√™s vamos estar l√° nessa live de encerramento dessa imers√£o de agentes de IA. E claro, n√£o compre a Alura hoje, porque o pr√≥ximo passo, al√©m de voc√™ fazer coisas como Streamlit e tudo mais pra esse projeto, √© mergulhar mais ainda nesse mundo de Rague, nesse mundo de agentes. Aqui foi um primeiro projeto, mas ali dentro da plataforma da Alura, tem muitos outros projetos, tem muitos professores ensinando a fazer coisas num pr√≥ximo n√≠vel tamb√©m, aquelas palavrinhas que eu comentei com voc√™, de, vamos l√°, MCP, A2A, tools, as ferramentas e tudo mais, l√° na plataforma da Alura, vai ter cursos usando uma l√≥gica parecida com essa que a gente ensinou pra voc√™s, mas conectando com ferramentas, conectando com um monte de coisa, internet, que a gente n√£o fez acesso √† internet, a gente fez acesso √† PDF, como conectar com a internet, com a busca do Google, etc. Isso tudo voc√™ vai ver l√° na plataforma da Alura, nas forma√ß√µes e nos cursos, mas eu vou falar pra voc√™ n√£o comprar a Alura hoje, porque o patr√£o ficou maluco. E l√° nessa live de encerramento, a gente vai disponibilizar pra voc√™s um desconto, uma promo√ß√£o especial s√≥ pra quem acompanhou essa imers√£o de agentes de A aqui com a gente. Ent√£o, pessoal, muito obrigado pela participa√ß√£o de voc√™s, recadinhos finais. S√≥ agradecer ao pessoal, espero que voc√™s tenham gostado da imers√£o, que voc√™s tenham aprendido e que este seja s√≥ o come√ßo de diversos agentes que voc√™s v√£o criar. E a gente quer dar de olho em todos. Muito bom. Bom, espero que voc√™s tenham se divertido quanto eu me diverti. Fabr√≠cio, Carol, muito obrigado. Foi muito legal estar aqui. E √© isso. Nos vemos por a√≠. Vou ficar aqui ansioso esperando pelos posts, pelos coment√°rios. Vamos ver. Quero saber o que voc√™s conseguiram criar. Exatamente. E como eu sempre digo, como dizia o Etbilu, busquem conhecimento, continuem estudando, n√£o deixem terminar s√≥ aqui nessa imers√£o. At√© mais, pessoal. A gente se v√™ na pr√≥xima. Tchau. At√© mais, pessoal.