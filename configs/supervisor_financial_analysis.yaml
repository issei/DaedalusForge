# Em configs/supervisor_financial_analysis.yaml

process:
  name: "supervisor-financial-analysis-utcp-v1"
  start: "supervisor"

# Nova seção para definir ferramentas externas via UTCP
tools:
  financial_news_api:
    description: "API para buscar notícias financeiras sobre uma empresa."
    provider_type: "http"
    provider_config:
      base_url: "https://api.example-financial-news.com/v1"
      auth:
        type: "bearer"
        secret: "FINANCIAL_NEWS_API_KEY" # Nome da variável de ambiente
    tools:
      - name: "search"
        description: "Busca notícias por ticker de empresa."
        endpoint: "/search"
        method: "GET"
        parameters:
          - name: "ticker"
            in: "query"
            type: "string"
            description: "O ticker da ação da empresa (ex: GOOGL, AAPL)."
            required: true

agents:
  supervisor:
    kind: "supervisor"
    purpose: "Analisar a solicitação do usuário e decidir qual especialista deve atuar."
    model_name: "gemini-1.5-pro"
    available_agents: ["market_researcher", "code_interpreter"]
    prompt_template: |
      Você é um supervisor de uma equipe de análise financeira.
      Sua equipe é composta por:
      - market_researcher: Especialista em pesquisar notícias e tendências de mercado na web.
      - code_interpreter: Especialista em executar código Python para análise de dados e visualização.
      
      Com base na conversa até agora e na última solicitação do usuário, qual especialista deve agir a seguir?
      Responda apenas com o nome do especialista ou 'FINISH' se a tarefa estiver concluída.
      Agentes disponíveis: {available_agents}
      
      Histórico: {messages}
      Solicitação: {context[user_request]}

  market_researcher:
    kind: "utcp_agent" # Alterado de "tool_using"
    purpose: "Usar a API de notícias financeiras para pesquisar informações."
    model_name: "gemini-1.5-pro"
    tools: ["financial_news_api"] # Referencia o manual UTCP
    prompt_template: |
      Sua tarefa é encontrar notícias sobre a empresa em '{context[user_request]}'.
      Use a ferramenta 'financial_news_api.search' para isso.
      Responda com um JSON contendo "tool_name" e "parameters".
      Exemplo: {"tool_name": "financial_news_api.search", "parameters": {"ticker": "MSFT"}}
    output_key: "research_summary"

  code_interpreter:
    kind: "tool_using"
    purpose: "Executar código Python para análise e visualização de dados."
    model_name: "gemini-1.5-pro"
    tools: ["python_repl"]
    prompt_template: "Com base nos dados em {artifacts[research_summary]}, gere um gráfico de barras mostrando o sentimento das notícias."
    output_key: "chart_code"

edges:
  # O supervisor decide o fluxo dinamicamente
  - { from: "supervisor", to: "market_researcher", condition: "quality.next_agent == 'market_researcher'" }
  - { from: "supervisor", to: "code_interpreter", condition: "quality.next_agent == 'code_interpreter'" }
  - { from: "supervisor", to: "__end__", condition: "quality.next_agent == 'FINISH'" }
  
  # Agentes de trabalho sempre retornam ao supervisor
  - { from: "market_researcher", to: "supervisor" }
  - { from: "code_interpreter", to: "supervisor" }